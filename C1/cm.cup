/*
  Created by: Umer Ahmed and Numan Mir
  File Name: cm.cup.rules
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal ELSE, IF, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NOTEQ, ASSIGN, SEMI, COMMA, LPAREN, RPAREN, LSQUAREB, RSQUAREB, LCURLYB, RCURLYB;
terminal String ID;
terminal String NUM;
terminal ERROR;

non terminal program1;
non terminal VarExp var;
non terminal Exp statement, return_stmt, selection_stmt, iteration_stmt, compound_stmt;
non terminal Exp expression, expression_stmt, simple_expression, additive_expression, term, factor, call; 
non terminal ExpList args, arg_list, statement_list;
non terminal VarDecList local_declarations;
non terminal VarDec var_declaration;
non terminal NameTy type_specifier;
non terminal program;
non terminal declaration_list;
non terminal declaration, fun_declaration;
non terminal params;
non terminal param_list, param;
non terminal relop, addop, mulop;

/*
non terminal program, stmt_seq;
non terminal stmt, if_stmt, repeat_stmt, assign_stmt, read_stmt, write_stmt;
non terminal exp, simple_exp, term, factor;   
*/
/* ----------------------------Grammar Section-------------------- */
start with program1;

program1     ::= statement_list:v 
                 {: RESULT = v; :}
               ;

/* 1-15 */
program	            ::= declaration_list
                     ;

declaration_list     ::= declaration_list declaration 
                     | declaration
                     ;
                     
declaration          ::= var_declaration 
                     | fun_declaration
                     ;

var_declaration      ::= type_specifier:t ID:i SEMI 
                        {: RESULT = new SimpleDec(tleft, tright, t, i); :}
                     | type_specifier:t ID:i LSQUAREB NUM:n RSQUAREB SEMI
                        {: RESULT = new ArrayDec(tleft, tright, t, i,  new IntExp(nleft, nright, Integer.parseInt(n)) ); :}
                     ;

type_specifier       ::= INT:i
                        {: RESULT = new NameTy(ileft, iright, NameTy.INT); :}
                     | VOID:v
                        {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
                     ;

fun_declaration      ::= type_specifier ID LPAREN params RPAREN compound_stmt
                     ;

params               ::= param_list 
                     | VOID
                     ;

param_list           ::= param_list COMMA param 
                     | param
                     ;

param                ::= type_specifier ID 
                     | type_specifier ID LSQUAREB RSQUAREB
                     ;

compound_stmt        ::= LCURLYB:lcb local_declarations:l statement_list:s RCURLYB
                        {: RESULT = new CompoundExp(lcbleft, lcbright, l, s); :}
                     ;

local_declarations   ::= local_declarations:l var_declaration:v
                        {:  VarDecList t = l;
                           while(t.tail != null)
                              t = t.tail;
                           t.tail = new VarDecList(v, null);
                           RESULT = l; 
                        :}
                     | {: RESULT = new VarDecList(null, null); :} //does NilExp make sense here?
                     ;

statement_list       ::= statement_list:s1 statement:s2 
                        {: ExpList t = s1;
                           while(t.tail != null)
                              t = t.tail;
                           t.tail = new ExpList(s2, null);
                           RESULT = s1;
                        :}
                     | {: RESULT = new ExpList(null, null); :}
                     ;

statement            ::= expression_stmt:e 
                        {: RESULT = e; :}
                     | compound_stmt:c
                        {: RESULT = c; :}
                     | selection_stmt:s
                        {: RESULT = s; :}
                     | iteration_stmt:i
                        {: RESULT = i; :}
                     | return_stmt:r
                        {: RESULT = r; :}
                     ;

expression_stmt      ::= expression:e SEMI
                        {: RESULT = e; :}
                     | SEMI
                        {: /* do we NilExp here? */ :}
                     ;
/* 15 */             
selection_stmt       ::= IF:i LPAREN expression:e RPAREN statement:s
                        {: RESULT = new IfExp(ileft, iright, e, s, new NilExp(ileft, iright));
                        /* not sure about NilExp's row/col */ :}
                     | IF:i LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
                        {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
                     ;

/* 16 - 29 */
iteration_stmt       ::= WHILE:w LPAREN expression:e RPAREN statement:s
                        {: RESULT = new WhileExp(wleft, wright, e, s); :}
                     ;

return_stmt          ::= RETURN:r expression:e SEMI
                        {: RESULT = new ReturnExp(rleft, rright, e); :}
                     | RETURN:r SEMI
                        {: RESULT = new ReturnExp(rleft, rright, new NilExp(rleft, rright)); :}
                     ;


expression           ::= var:v ASSIGN expression:e
                        {: RESULT = new AssignExp(vleft, vright, v, e); :}
                     | simple_expression:s  
                        {: RESULT = s; :}
                     ;

var                  ::= ID:i
                        {: RESULT = new VarExp(ileft, iright, new SimpleVar(ileft, iright, i)); :}
                     | ID:i LSQUAREB expression:e RSQUAREB
                        {: RESULT = new VarExp(ileft, iright, new IndexVar(ileft, iright, i, e)); :}
                     ;

simple_expression    ::= additive_expression:a1 LTEQ additive_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.LTEQ, a2); :}
                     |   additive_expression:a1 LT additive_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.LT, a2); :}
                     |   additive_expression:a1 GT additive_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.GT, a2); :}
                     |   additive_expression:a1 GTEQ additive_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.GTEQ, a2); :}
                     |   additive_expression:a1 EQ additive_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.EQ, a2); :}
                     |   additive_expression:a1 NOTEQ additive_expression:a2
                        {: RESULT = new OpExp(a1left, a1right, a1, OpExp.NOTEQ, a2); :}
                     | additive_expression:a
                        {: RESULT = a; :}
                     ;
/*
relop                ::= LTEQ
                     | LT
                     | GT
                     | GTEQ
                     | EQ
                     | NOTEQ
                     ;
*/

additive_expression  ::= additive_expression:a PLUS term:t
                        {: RESULT = new OpExp(aleft, aright, a, OpExp.PLUS, t); :}
                     | additive_expression:a MINUS term:t
                        {: RESULT = new OpExp(aleft, aright, a, OpExp.MINUS, t); :}
                     | term:t
                        {: RESULT = t; :}
                     ;
/*
addop                ::= PLUS
                     | MINUS
                     ;
*/
term                 ::= term:t TIMES factor:f
                        {: RESULT = new OpExp(tleft, tright, t, OpExp.TIMES, f); :}
                     | term:t OVER factor:f
                        {: RESULT = new OpExp(tleft, tright, t, OpExp.OVER, f); :}
                     | factor:f
                        {: RESULT = f; :}
                     ;
/*
mulop                ::= TIMES
                     | OVER
                     ;
*/
factor               ::= LPAREN expression:e RPAREN
                        {: RESULT = e; :}
                     | var:v
                        {: RESULT = v; :}
                     | call:c
                        {: RESULT = c; :}
                     | NUM:n
                        {: RESULT = new IntExp(nleft, nright, Integer.parseInt(n)); :}
                     ;

call                 ::= ID:i LPAREN args:a RPAREN
                        {: RESULT = new CallExp(ileft, iright, i, a); :}
                     ;

args                 ::= arg_list:a
                        {: RESULT = a; :}
                     |  

                     ;

arg_list             ::= arg_list:a COMMA expression:e
                        {: ExpList t = a;
                           while(t.tail != null)
                              t = t.tail;
                           t.tail = new ExpList(e, null);
                           RESULT = a;
                        :}
                     | expression:e
                        {: RESULT = new ExpList(e, null); :}
                     ;

              
            
      
