/*
  Created by: Umer Ahmed and Numan Mir
  File Name: cm.cup.rules
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal ELSE, IF, INT, RETURN, VOID, WHILE;
terminal PLUS, MINUS, TIMES, OVER, LT, LTEQ, GT, GTEQ, EQ, NOTEQ, ASSIGN, SEMI, COMMA, LPAREN, RPAREN, LSQUAREB, RSQUAREB, LCURLYB, RCURLYB;
terminal ID, NUM;
terminal ERROR;

non terminal program1;
non terminal program;
non terminal declaration_list;
non terminal declaration, var_declaration, fun_declaration;
non terminal type_specifier, params, compound_stmt;
non terminal param_list, param;
non terminal local_declarations, statememt_list, statement;
non terminal expression_stmt, selection_stmt, iteration_stmt, return_stmt;
non terminal expression, var, simple_expression, additive_expression;
non terminal relop, addop, mulop;
non terminal term, factor, call;
non terminal args, arg_list;

/*
non terminal program, stmt_seq;
non terminal stmt, if_stmt, repeat_stmt, assign_stmt, read_stmt, write_stmt;
non terminal exp, simple_exp, term, factor;   
*/
/* ----------------------------Grammar Section-------------------- */
start with program;

program1     ::= expression:e 
                 {: RESULT = e; :}
               ;

/* 1-15 */
program	            ::= declaration_list
                     ;

declaration_list     ::= declaration_list declaration 
                     | declaration
                     ;
                     
declaration          ::= var_declaration 
                     | fun_declaration
                     ;

var_declaration      ::= type_specifier ID SEMI 
                     | type_specifier ID LSQUAREB NUM RSQUAREB SEMI
                     ;

type_specifier       ::= INT 
                     | VOID
                     ;

fun_declaration      ::= type_specifier ID LPAREN params RPAREN compound_stmt
                     ;

params               ::= param_list 
                     | VOID
                     ;

param_list           ::= param_list COMMA param 
                     | param
                     ;

param                ::= type_specifier ID 
                     | type_specifier ID LSQUAREB RSQUAREB
                     ;

compound_stmt        ::= LCURLYB local_declarations statememt_list RCURLYB
                     ;

local_declarations   ::= local_declarations var_declaration
                     |
                     ;

statememt_list       ::= statememt_list statement 
                     | 
                     ;

statement            ::= expression_stmt 
                     | compound_stmt
                     | selection_stmt
                     | iteration_stmt
                     | return_stmt
                     ;

expression_stmt      ::= expression SEMI
                     | SEMI
                     ;
/* 15 */
selection_stmt       ::= IF LPAREN expression RPAREN statement
                     | IF LPAREN expression RPAREN statement ELSE statement
                     ;

/* 16 - 29 */
iteration_stmt       ::= WHILE LPAREN expression RPAREN statement
                     ;

return_stmt          ::= RETURN expression SEMI
                     | RETURN SEMI
                     ;

expression           ::= var ASSIGN expression
                     | simple_expression
                     ;
                     
var                  ::= ID
                     | ID LSQUAREB expression RSQUAREB
                     ;

simple_expression    ::= additive_expression relop additive_expression
                     | additive_expression
                     ;

relop                ::= LTEQ
                     | LT
                     | GT
                     | GTEQ
                     | EQ
                     | NOTEQ
                     ;

additive_expression  ::= additive_expression addop term
                     | term
                     ;

addop                ::= PLUS
                     | MINUS
                     ;

term                 ::= term mulop factor
                     | factor
                     ;

mulop                ::= TIMES
                     | OVER
                     ;

factor               ::= LPAREN expression RPAREN
                     | var
                     | call
                     | NUM
                     ;

call                 ::= ID LPAREN args RPAREN
                     ;

args                 ::= arg_list
                     |
                     ;

arg_list             ::= arg_list COMMA expression
                     | expression
                     ;

/* ----------------------------smaple parse bellow-------------------- */
/*
start with program;


program	     ::= stmt_seq
               ;

stmt_seq     ::= stmt_seq SEMI stmt 
               | stmt
               | error SEMI stmt
               ;

stmt         ::= if_stmt
               | repeat_stmt
               | assign_stmt
               | read_stmt
               | write_stmt
               ;

if_stmt      ::= IF exp THEN stmt_seq END
               | IF exp THEN stmt_seq ELSE stmt_seq END
               ;

repeat_stmt  ::= REPEAT stmt_seq UNTIL exp
               ;

assign_stmt  ::= ID ASSIGN exp
               ;

read_stmt    ::= READ ID
               ;

write_stmt   ::= WRITE exp
               ;

exp          ::= simple_exp LT simple_exp
               | simple_exp GT simple_exp
               | simple_exp EQ simple_exp
               | simple_exp
               ;

simple_exp   ::= simple_exp PLUS term
               | simple_exp MINUS term
               | term
               ;

term         ::= term TIMES factor
               | term OVER factor
               | factor
               ;

factor       ::= LPAREN exp RPAREN
               | NUM
               | ID
               ;
*/